"""
API REST para an치lisis bioinform치tico de secuencias de ADN y ARN.
Desarrollada con FastAPI, proporciona endpoints para operaciones comunes
en bioinform치tica como an치lisis de secuencias, transcripci칩n y traducci칩n.

Autor: Yesenia Felipe
GitHub: 
"""

from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from sequences import SequenceAnalyzer

# Inicializar aplicaci칩n FastAPI con metadatos para documentaci칩n autom치tica
app = FastAPI(title='API Bioinform치tica', description='An치lisis de secuencias ADN/ARN')

# Modelos Pydantic para validaci칩n de datos de entrada
class SequenceRequest(BaseModel):
    """Modelo para solicitudes de an치lisis de secuencia individual"""
    sequence: str
    sequence_type: str= 'DNA' # DNA o RNA
    
class AnalysisRequest(BaseModel):
    """Modelo para solicitudes de an치lisis de m칰ltiples secuencias."""
    sequences: list[str]
    
# Instancia global del analizador de secuencias
analyzer = SequenceAnalyzer()

@app.get("/")
def home():
    """
    Endpoint ra칤z que confirma que la API est치 funcionando.
    
    Returns:
        dict: Mensaje de confirmaci칩n del servicio
    """
    return {"message": "API Bioinform치tica funcionando 游빏"}

@app.post("/analyze")
def analyze_sequence(request: SequenceRequest):
    """
    Analiza una secuencia individual de ADN o ARN.
    
    Proporciona an치lisis completo incluyendo:
    - Composici칩n de bases
    - Contenido GC
    - Sitios de restricci칩n
    - Peso molecular
    
    Args:
        request (SequenceRequest): Secuencia y tipo a analizar
        
    Returns:
        dict: Resultados del an치lisis
        
    Raises:
        HTTPException: 400 si la secuencia es inv치lida
    """
    try:
        result = analyzer.analyze_single_sequence(request.sequence, request.sequence_type)
        return result
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))
    
@app.post("/analyze-batch/")
def analyze_multiple_sequences(request: AnalysisRequest):
    """
    Analiza m칰ltiples secuencias en una sola solicitud (batch processing).
    
    칔til para procesar grandes cantidades de secuencias de forma eficiente.
    
    Args:
        request (AnalysisRequest): Lista de secuencias a analizar
        
    Returns:
        dict: Diccionario con lista de resultados
        
    Raises:
        HTTPException: 400 si alguna secuencia es inv치lida
    """
    try:
        results = analyzer.analyze_multiple_sequences(request.sequences)
        return {"results": results}
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))
    
@app.get("/transcribe/{sequence, sequence_type}")
def transcribe_dna_to_rna(sequence:str, sequence_type:str="DNA"):
    """
    Transcribe una secuencia de ADN a ARN.
    
    La transcripci칩n convierte Timina (T) a Uracilo (U) siguiendo
    las reglas de complementariedad de bases.
    
    Args:
        dna_sequence (str): Secuencia de ADN a transcribir
        
    Returns:
        dict: Secuencias de ADN original y ARN resultante
        
    Raises:
        HTTPException: 400 si la secuencia no es ADN v치lido
    """
    try:
        if sequence_type != "DNA":
            raise ValueError("Solo se puede transcribir de ADN a ARN")
        rna_sequence = analyzer.transcribe_dna_to_rna(sequence)
        return {"dna_sequence": sequence, 
                "rna_sequence": f"{rna_sequence}"}
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))
    
@app.get("/translate/{sequence, sequence_type}")
def translate_seq_to_protein(sequence:str, sequence_type:str):
    """
    Traduce una secuencia de ARN a prote칤na usando el c칩digo gen칠tico est치ndar.
    
    Cada cod칩n (3 bases) se traduce a un amino치cido seg칰n las reglas
    del c칩digo gen칠tico. El s칤mbolo '*' indica un cod칩n de parada.
    
    Args:
        sequence (str): Secuencia de ARN a traducir
        sequence_type (str): Tipo de secuencia (debe ser "RNA")
        
    Returns:
        dict: Secuencia original y secuencia proteica resultante
        
    Raises:
        HTTPException: 400 si la secuencia no es ARN v치lido
    """
    try:
        translate_sequence = analyzer.translate_seq_to_protein(sequence, sequence_type)
        return {"sequence": sequence,
                "sequence_type": sequence_type,
                "translate_sequence": f"{translate_sequence}"}
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))
    
@app.get("/gc-content/{sequence}")
def calculate_gc_content(sequence: str):
    """
     Calcula el porcentaje de contenido GC de una secuencia.
    
    El contenido GC es un indicador de estabilidad t칠rmica y
    se usa ampliamente en dise침o de primers y estudios filogen칠ticos.
    
    Args:
        sequence (str): Secuencia a analizar
        
    Returns:
        dict: Secuencia y porcentaje de contenido GC
        
    Raises:
        HTTPException: 400 si la secuencia es inv치lida
    """
    try:
        gc_content = analyzer.calculate_gc_content(sequence)
        return {"sequence": sequence, "gc_content": f"{gc_content:.2f}"}
    except ValueError as e:
        raise HTTPException(status_code= 400, detail=str(e))